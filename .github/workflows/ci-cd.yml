name: NEXUS-CORE CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'

jobs:
  # Frontend Tests & Build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type checking
        run: npm run type-check
      
      - name: Lint check
        run: npm run lint
      
      - name: Run tests
        run: npx vitest run --coverage
      
      - name: Build application
        run: npm run build
      
      - name: Bundle size check
        run: npm run size-check
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

  # Backend Tests & Build
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: python -m pytest tests/unit/test_health.py tests/integration/test_mcp_basic.py -v
        env:
          ENVIRONMENT: test
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_SERVICE_KEY: test_key
          SUPABASE_ANON_KEY: test_anon_key
      
      - name: Security scan (Bandit)
        run: bandit -r . -ll || true
        continue-on-error: true
      
      - name: Check requirements safety
        run: safety check --file requirements.txt || true
        continue-on-error: true

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check frontend status
        run: |
          if [ "${{ needs.frontend.result }}" != "success" ]; then
            echo "❌ Frontend checks failed"
            exit 1
          else
            echo "✅ Frontend checks passed"
          fi
      
      - name: Check backend status  
        run: |
          if [ "${{ needs.backend.result }}" != "success" ]; then
            echo "❌ Backend checks failed"
            exit 1
          else
            echo "✅ Backend checks passed"
          fi
      
      - name: Quality summary
        run: |
          echo "## 🎯 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Ready for production deployment" >> $GITHUB_STEP_SUMMARY

  # Docker Build (only on main branch)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: nexus-core:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker build -t nexus-core:test .
          docker run --rm nexus-core:test echo "Docker image built successfully"

  # Notify on completion
  notify:
    name: Pipeline Complete
    runs-on: ubuntu-latest
    needs: [quality-gates, docker-build]
    if: always()
    
    steps:
      - name: Pipeline summary
        run: |
          echo "## 🎯 NEXUS-CORE Pipeline Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Gates: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Foundation pipeline established successfully" >> $GITHUB_STEP_SUMMARY
#!/usr/bin/env python3
"""
Environment Setup Script for NEXUS-CORE
This script helps set up environment variables securely
"""

import os
import sys
import json
import getpass
from pathlib import Path
from typing import Dict, Optional

# Color codes for terminal output
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header(message: str):
    print(f"\n{Colors.HEADER}{Colors.BOLD}{message}{Colors.ENDC}")

def print_success(message: str):
    print(f"{Colors.OKGREEN}✓ {message}{Colors.ENDC}")

def print_warning(message: str):
    print(f"{Colors.WARNING}⚠ {message}{Colors.ENDC}")

def print_error(message: str):
    print(f"{Colors.FAIL}✗ {message}{Colors.ENDC}")

def print_info(message: str):
    print(f"{Colors.OKBLUE}ℹ {message}{Colors.ENDC}")

class EnvSetup:
    def __init__(self):
        self.root_dir = Path(__file__).parent.parent
        self.backend_dir = self.root_dir / "backend"
        self.frontend_dir = self.root_dir / "frontend"
        
    def check_env_files(self) -> Dict[str, bool]:
        """Check which .env files exist"""
        return {
            "backend": (self.backend_dir / ".env").exists(),
            "frontend": (self.frontend_dir / ".env").exists()
        }
    
    def load_env_example(self, path: Path) -> Dict[str, str]:
        """Load variables from .env.example file"""
        env_vars = {}
        example_file = path / ".env.example"
        
        if not example_file.exists():
            return env_vars
            
        with open(example_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
                    
        return env_vars
    
    def get_secure_input(self, prompt: str, is_password: bool = False) -> str:
        """Get input from user, with password masking if needed"""
        if is_password:
            return getpass.getpass(f"{Colors.OKCYAN}{prompt}: {Colors.ENDC}")
        return input(f"{Colors.OKCYAN}{prompt}: {Colors.ENDC}")
    
    def setup_backend_env(self):
        """Set up backend .env file"""
        print_header("Setting up Backend Environment Variables")
        
        env_vars = self.load_env_example(self.backend_dir)
        
        # Critical variables that need user input
        critical_vars = {
            "SUPABASE_URL": "Enter your Supabase URL",
            "SUPABASE_SERVICE_KEY": "Enter your Supabase Service Key (will be hidden)",
            "SUPABASE_ANON_KEY": "Enter your Supabase Anon Key",
            "FIREBASE_PROJECT_ID": "Enter your Firebase Project ID",
            "JWT_SECRET_KEY": "Enter a secret key for JWT (or press Enter to generate)"
        }
        
        print_info("Please provide the following required values:")
        
        for var, prompt in critical_vars.items():
            is_password = "KEY" in var or "SECRET" in var
            value = self.get_secure_input(prompt, is_password)
            
            # Generate JWT secret if not provided
            if var == "JWT_SECRET_KEY" and not value:
                import secrets
                value = secrets.token_urlsafe(32)
                print_success(f"Generated JWT secret key")
                
            if value:
                env_vars[var] = value
        
        # Write .env file
        env_file = self.backend_dir / ".env"
        with open(env_file, 'w') as f:
            f.write("# Backend Environment Variables\n")
            f.write("# Generated by setup-env.py\n\n")
            
            for key, value in env_vars.items():
                # Don't quote values that are already quoted or are arrays
                if value.startswith('[') or value.startswith('"'):
                    f.write(f"{key}={value}\n")
                else:
                    f.write(f'{key}="{value}"\n')
                    
        print_success(f"Backend .env file created at {env_file}")
        
    def setup_frontend_env(self):
        """Set up frontend .env file"""
        print_header("Setting up Frontend Environment Variables")
        
        env_vars = self.load_env_example(self.frontend_dir)
        
        # Variables that need user input
        required_vars = {
            "VITE_SUPABASE_URL": "Enter your Supabase URL (same as backend)",
            "VITE_SUPABASE_ANON_KEY": "Enter your Supabase Anon Key (same as backend)",
        }
        
        print_info("Please provide the following required values:")
        
        for var, prompt in required_vars.items():
            value = self.get_secure_input(prompt)
            if value:
                env_vars[var] = value
        
        # Write .env file
        env_file = self.frontend_dir / ".env"
        with open(env_file, 'w') as f:
            f.write("# Frontend Environment Variables\n")
            f.write("# Generated by setup-env.py\n\n")
            
            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")
                    
        print_success(f"Frontend .env file created at {env_file}")
    
    def verify_gitignore(self):
        """Verify that .env files are in .gitignore"""
        gitignore_path = self.root_dir / ".gitignore"
        
        if not gitignore_path.exists():
            print_error(".gitignore file not found!")
            return False
            
        with open(gitignore_path, 'r') as f:
            content = f.read()
            
        if '.env' in content:
            print_success(".env files are properly ignored by git")
            return True
        else:
            print_error(".env files are NOT in .gitignore! This is a security risk!")
            return False
    
    def run(self):
        """Run the complete setup process"""
        print_header("NEXUS-CORE Environment Setup")
        print_info("This script will help you set up environment variables securely")
        
        # Check existing files
        existing = self.check_env_files()
        
        if existing["backend"] or existing["frontend"]:
            print_warning("Existing .env files found:")
            if existing["backend"]:
                print(f"  - {self.backend_dir / '.env'}")
            if existing["frontend"]:
                print(f"  - {self.frontend_dir / '.env'}")
                
            response = input(f"\n{Colors.WARNING}Overwrite existing files? (y/N): {Colors.ENDC}")
            if response.lower() != 'y':
                print_info("Setup cancelled")
                return
        
        # Verify gitignore
        self.verify_gitignore()
        
        # Setup backend
        self.setup_backend_env()
        
        # Setup frontend
        self.setup_frontend_env()
        
        print_header("Setup Complete!")
        print_success("Environment files have been created")
        print_info("Next steps:")
        print("  1. Review the generated .env files")
        print("  2. Update any additional configuration as needed")
        print("  3. Never commit .env files to version control")
        print("  4. Use 'make install' to install dependencies")
        print("  5. Use 'make run-backend' and 'make run-frontend' to start the application")

if __name__ == "__main__":
    try:
        setup = EnvSetup()
        setup.run()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print_error(f"An error occurred: {e}")
        sys.exit(1)
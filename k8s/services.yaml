# NEXUS-CORE Services Configuration
apiVersion: v1
kind: Service
metadata:
  name: nexus-core-service
  namespace: nexus-core
  labels:
    app: nexus-core
    component: service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
spec:
  type: LoadBalancer
  selector:
    app: nexus-core
    component: application
  
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: api
    port: 8000
    targetPort: 8000
    protocol: TCP
  
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
# Internal Service for inter-pod communication
apiVersion: v1
kind: Service
metadata:
  name: nexus-core-internal
  namespace: nexus-core
  labels:
    app: nexus-core
    component: internal-service
spec:
  type: ClusterIP
  selector:
    app: nexus-core
    component: application
  
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: api
    port: 8000
    targetPort: 8000
    protocol: TCP

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: nexus-core-redis
  namespace: nexus-core
  labels:
    app: nexus-core
    component: redis
spec:
  type: ClusterIP
  selector:
    app: nexus-core
    component: redis
  
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-core-redis
  namespace: nexus-core
  labels:
    app: nexus-core
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nexus-core
      component: redis
  
  template:
    metadata:
      labels:
        app: nexus-core
        component: redis
    
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      
      containers:
      - name: redis
        image: redis:7.2-alpine
        
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "512mb"
        - --maxmemory-policy
        - "allkeys-lru"
        
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        
        volumeMounts:
        - name: redis-data
          mountPath: /data
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: nexus-core-redis-pvc

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-core-ingress
  namespace: nexus-core
  labels:
    app: nexus-core
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - nexus.ngxperformance.com
    - api.ngxperformance.com
    secretName: nexus-core-tls
  
  rules:
  - host: nexus.ngxperformance.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-core-service
            port:
              number: 80
  
  - host: api.ngxperformance.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-core-service
            port:
              number: 8000

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nexus-core-netpol
  namespace: nexus-core
spec:
  podSelector:
    matchLabels:
      app: nexus-core
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 8000
  
  - from:
    - podSelector:
        matchLabels:
          app: nexus-core
    ports:
    - protocol: TCP
      port: 6379
  
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  
  - to:
    - podSelector:
        matchLabels:
          app: nexus-core
          component: redis
    ports:
    - protocol: TCP
      port: 6379
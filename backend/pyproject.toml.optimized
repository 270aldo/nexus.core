[project]
name = "nexus-core-backend"
version = "1.0.0"
description = "Backend API for NGX NEXUS-CORE Control Center"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.30.0",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.9",
    "httpx>=0.27.0",
    "supabase>=2.6.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dateutil>=2.9.0",
    "redis>=5.0.0",
    "celery>=5.4.0",
    "sentry-sdk[fastapi]>=2.10.0",
    "structlog>=24.2.0",
    "orjson>=3.10.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "sqlalchemy>=2.0.0",
    "pytest>=8.3.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "black>=24.4.0",
    "ruff>=0.5.0",
    "mypy>=1.11.0",
    "pre-commit>=3.7.0"
]

[project.optional-dependencies]
dev = [
    "debugpy>=1.8.0",
    "ipython>=8.25.0",
    "rich>=13.7.0"
]

[build-system]
requires = ["setuptools>=70.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
    "S",    # flake8-bandit
    "A",    # flake8-builtins
    "DTZ",  # flake8-datetimez
    "ICN",  # flake8-import-conventions
    "RET",  # flake8-return
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "NPY",  # NumPy-specific rules
    "PERF", # Perflint
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "S101",   # use of assert (needed for tests)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913" # too many arguments
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG", "PLR2004"]
"app/apis/*/tests/*" = ["S101", "ARG", "PLR2004"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests", "app/apis/*/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    --strict-markers
    --tb=short
    --cov=app
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80
    -vv
"""
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true

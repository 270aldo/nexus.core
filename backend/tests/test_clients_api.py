import pytest
from fastapi.testclient import TestClient
from backend.main import app # Assuming your FastAPI app instance is named 'app' in main.py

client = TestClient(app)

# Global variable to store client ID for use across tests
# This is a simple way to pass state; fixtures could be used for more complex scenarios.
created_client_id: str = None
created_client_data: dict = None

def test_create_client():
    global created_client_id, created_client_data

    client_payload = {
        "type": "individual",
        "name": "Test User One",
        "email": "test.user.one@example.com",
        "phone": "1234567890",
        "birth_date": "1990-01-01",
        "status": "active",
        "goals": ["weight loss", "muscle gain"],
        "payment_status": "paid"
    }

    response = client.post("/clients", json=client_payload)

    assert response.status_code == 201
    response_data = response.json()
    assert "id" in response_data
    assert response_data["name"] == client_payload["name"]
    assert response_data["email"] == client_payload["email"]

    created_client_id = response_data["id"]
    created_client_data = response_data # Store the full client data for comparison
    # Ensure created_client_id is not None before other tests run
    assert created_client_id is not None

def test_get_client_by_id():
    assert created_client_id is not None, "Client ID not created from previous test"

    response = client.get(f"/clients/{created_client_id}")

    assert response.status_code == 200
    response_data = response.json()
    # Compare relevant fields, join_date and created_at might be generated by DB
    assert response_data["id"] == created_client_id
    assert response_data["name"] == created_client_data["name"]
    assert response_data["email"] == created_client_data["email"]
    assert response_data["type"] == created_client_data["type"]

def test_search_clients():
    assert created_client_id is not None, "Client ID not created from previous test"

    # Search by email (should be unique enough for this test)
    response = client.get(f"/clients?q={created_client_data['email']}")

    assert response.status_code == 200
    response_json = response.json()
    assert "clients" in response_json
    assert "total" in response_json
    assert response_json["total"] > 0

    found = False
    for c in response_json["clients"]:
        if c["id"] == created_client_id:
            found = True
            break
    assert found, f"Created client with ID {created_client_id} not found in search results"

def test_update_client():
    assert created_client_id is not None, "Client ID not created from previous test"

    update_payload = {
        "name": "Test User One Updated",
        "phone": "0987654321",
        "goals": ["general fitness"]
    }

    response = client.put(f"/clients/{created_client_id}", json=update_payload)

    assert response.status_code == 200
    response_data = response.json()
    assert response_data["id"] == created_client_id
    assert response_data["name"] == update_payload["name"]
    assert response_data["phone"] == update_payload["phone"]
    assert response_data["goals"] == update_payload["goals"]

    # Optionally, verify by GETting the client again
    get_response = client.get(f"/clients/{created_client_id}")
    assert get_response.status_code == 200
    get_data = get_response.json()
    assert get_data["name"] == update_payload["name"]
    assert get_data["phone"] == update_payload["phone"]
    assert get_data["goals"] == update_payload["goals"]

    # Update global data for next tests if needed (though delete is next)
    global created_client_data
    created_client_data = get_data


def test_delete_client():
    assert created_client_id is not None, "Client ID not created from previous test"

    response = client.delete(f"/clients/{created_client_id}")
    assert response.status_code == 204

    # Optionally, verify by trying to GET the client again
    get_response = client.get(f"/clients/{created_client_id}")
    assert get_response.status_code == 404

def test_get_non_existent_client():
    non_existent_id = "00000000-0000-0000-0000-000000000000" # A valid UUID format but unlikely to exist
    response = client.get(f"/clients/{non_existent_id}")
    assert response.status_code == 404

# To run these tests, you would typically use `pytest` in your terminal
# Ensure your FastAPI application is configured to connect to a test database if necessary,
# or be aware that these tests will interact with your development database.
# For now, these tests assume a real backend/database as per the subtask description.
# Mocking `supabase_admin_request` would be a good future improvement for isolation.
